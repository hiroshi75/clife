{"version":3,"sources":["serviceWorker.js","components/Hover.tsx","types/index.tsx","components/Cells.tsx","actions/index.ts","types/action.tsx","utils/sizeLib.tsx","components/Field.tsx","components/ContrtolButtons.tsx","utils/cellPatterns.tsx","components/PatternSelector.tsx","App.tsx","reducers/hover.tsx","utils/nextGeneration.ts","utils/patternPaster.tsx","reducers/field.tsx","reducers/app.tsx","reducers/controlButtons.tsx","reducers/patternSelector.tsx","reducers/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","style","fill","Hover","state","useSelector","hover","x","y","show","width","height","Cells","cellsElement","field","cells","map","index","rx","ry","key","className","onSendPlayCommand","play","type","onScreenSizeChanged","size","getWindowSize","document","documentElement","clientWidth","clientHeight","getFieldSize","isBrowser","getGridSize","fiesdSize","gridx","Math","ceil","gridy","getCurrentGridSize","Field","dispatch","useDispatch","refTimer","useRef","refRoot","boundingRectRef","left","top","appState","app","useEffect","current","getBoundingClientRect","convertToGrid","a","round","convertMousePosition","ev","rect","clientX","clientY","playing","setInterval","gridSize","clearInterval","windowX","windowY","outerBorder","vLines","xi","_x","push","x1","x2","y1","y2","hLines","yi","_y","xmlns","xmlnsXlink","onMouseMove","gridPoint","onClick","ref","ContrtolButtons","controlButtons","playLabel","Button","color","variant","disabled","cellPatterns","name","pattern","position","PatternSelector","patternSelector","patterns","value","ci","length","c","onChange","event","selectedType","parseInt","target","App","handler","addEventListener","removeEventListener","Grid","container","alignItems","spacing","item","src","alt","Typography","initialState","action","addAdjacent","adjacentCount","cy","nextGeneration","currentCellIndex","max","min","newCells","sx","sy","pastePattern","cellPattern","patternHeight","patternWidth","r","px","py","currentSize","floor","convertPosition","forEach","row","cx","i","initiasState","zoom","putCell","_cells","p","filter","sort","b","s","windowSize","rootReducer","combineReducers","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5b4d583.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { RECT_SIZE } from '../types';\r\nimport { StoreState } from '../reducers';\r\n\r\nconst style={ fill: \"red\" };\r\n\r\nconst Hover = ()=>{\r\n    const state = useSelector((state: StoreState)=>state.hover);\r\n    const {x, y, show} = state;\r\n\r\n    if(show){\r\n        return (<rect \r\n            width={RECT_SIZE}\r\n            height={RECT_SIZE}\r\n            x={x*RECT_SIZE}\r\n            y={y*RECT_SIZE}\r\n            style={style}\r\n        />);\r\n    } else{\r\n        return null;\r\n    }\r\n    \r\n};\r\n\r\nexport default Hover;\r\n","export const RECT_SIZE = 7;\r\nexport const MSEC_PER_GENERATION = 20;\r\n\r\nexport interface GridPoint{\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface CellType {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { StoreState } from '../reducers';\r\nimport { RECT_SIZE } from '../types';\r\n\r\nconst  Cells =()=>{\r\n    let fieldState = useSelector((state:StoreState)=>state.field);\r\n\r\n    const cellsElement = fieldState.cells.map(({x, y}, index)=>{\r\n        \r\n        const rx = x * RECT_SIZE;\r\n        const ry = y * RECT_SIZE;\r\n\r\n        return (<rect key={ index } \r\n                    x={ rx } \r\n                    y={ ry } \r\n                    width={ RECT_SIZE } \r\n                    height={ RECT_SIZE } \r\n                    className=\"cell\" />);\r\n\r\n    });\r\n    return (<g>{ cellsElement }</g>);\r\n};\r\n\r\nexport default Cells;","import * as actionTypes from '../types/action';\r\nimport { GridPoint } from '../types';\r\n\r\nexport interface FieldMouseMove{\r\n    type: actionTypes.FIELD_MOUSE_MOVE;\r\n    gridPoint: GridPoint;\r\n}\r\nexport const onFieldMouseMove= (p: GridPoint): FieldMouseMove => ({\r\n    type: actionTypes.FIELD_MOUSE_MOVE, \r\n    gridPoint: p\r\n    });\r\n\r\n\r\nexport interface FieldClick{\r\n    type: actionTypes.FIELD_CLICK;\r\n    gridPoint: GridPoint;\r\n}\r\nexport const onFieldClick = (p: GridPoint): FieldClick=>({\r\n    type: actionTypes.FIELD_CLICK,\r\n    gridPoint: p\r\n});\r\n\r\n\r\nexport interface SendPlayCommand{\r\n    type: actionTypes.SEND_PLAY_COMMAND;\r\n    play: boolean;\r\n}\r\nexport const onSendPlayCommand = (play: boolean): SendPlayCommand=>({\r\n    type: actionTypes.SEND_PLAY_COMMAND,\r\n    play  // true:実行 false: 停止\r\n});\r\n\r\n\r\nexport interface NextGeneration{\r\n    type:actionTypes.NEXT_GENERATION;\r\n    gridSize: GridPoint;\r\n}\r\nexport const toNextGeneration = (x: number,y: number): NextGeneration=>({\r\n    type:actionTypes.NEXT_GENERATION,\r\n    gridSize: {x,y}\r\n});\r\n\r\n\r\nexport interface ClearClicked{\r\n    type: actionTypes.CLEAR_CLICKED;\r\n}\r\nexport const onClearClicked = (): ClearClicked=>({\r\n    type: actionTypes.CLEAR_CLICKED\r\n});\r\n\r\nexport interface PatternChanged{\r\n    type: actionTypes.PATTERN_CHANGED;\r\n    selectedType: number;\r\n}\r\nexport const onPatternChanged = (selectedType: number):PatternChanged =>({\r\n    type: actionTypes.PATTERN_CHANGED,\r\n    selectedType: selectedType\r\n})\r\n\r\nexport interface ScreenSizeChanged{\r\n    type: actionTypes.SCREEN_SIZE_CHANGED;\r\n    size: {x:number; y:number;};\r\n}\r\nexport const onScreenSizeChanged = (x:number, y:number): ScreenSizeChanged =>({\r\n    type:actionTypes.SCREEN_SIZE_CHANGED,\r\n    size: {x,y}\r\n})\r\n\r\nexport type ClifeAction = FieldMouseMove | FieldClick | SendPlayCommand\r\n     | NextGeneration | ClearClicked | PatternChanged | ScreenSizeChanged;\r\n\r\n\r\n","export const FIELD_MOUSE_MOVE = \"FIELD_MOUSE_MOVE\";\r\nexport type FIELD_MOUSE_MOVE = typeof FIELD_MOUSE_MOVE;\r\n\r\nexport const FIELD_CLICK = \"FIELD_CLICK\";\r\nexport type FIELD_CLICK = typeof FIELD_CLICK;\r\n\r\nexport const SEND_PLAY_COMMAND = \"SEND_PLAY_COMMAND\";\r\nexport type SEND_PLAY_COMMAND = typeof SEND_PLAY_COMMAND;\r\n\r\nexport const NEXT_GENERATION = \"NEXT_GENERATION\";\r\nexport type NEXT_GENERATION = typeof NEXT_GENERATION;\r\n\r\nexport const CLEAR_CLICKED = \"CLEAR_CLICKED\";\r\nexport type CLEAR_CLICKED = typeof CLEAR_CLICKED;\r\n\r\nexport const PATTERN_CHANGED = \"PATTERN_CHANGED\";\r\nexport type PATTERN_CHANGED = typeof PATTERN_CHANGED;\r\n\r\nexport const SCREEN_SIZE_CHANGED = \"SCREEN_SIZE_CHANGED\";\r\nexport type SCREEN_SIZE_CHANGED = typeof SCREEN_SIZE_CHANGED;\r\n\r\n","import { isBrowser } from \"react-device-detect\";\r\nimport { RECT_SIZE } from \"../types\";\r\n\r\n\r\nexport type WindowSize =  { x: number; y: number; };\r\n\r\nexport const getWindowSize = (): WindowSize=>({\r\n  x: document.documentElement.clientWidth,\r\n  y: document.documentElement.clientHeight\r\n});\r\n\r\nexport const getFieldSize = ({ x, y }: WindowSize) => {\r\n  if(isBrowser){\r\n    return {x: x-26, y:y-80};\r\n  }else{\r\n    return {x: x-16, y:y-100};\r\n  }\r\n};\r\n\r\nexport const getGridSize = ({ x, y }: WindowSize) =>{\r\n  const fiesdSize = getFieldSize({ x, y });\r\n  return {\r\n    gridx: Math.ceil(fiesdSize.x/RECT_SIZE), \r\n    gridy: Math.ceil(fiesdSize.y/RECT_SIZE),\r\n    width: fiesdSize.x, height: fiesdSize.y\r\n  };\r\n};\r\n\r\nexport const getCurrentGridSize = ()=>{\r\n  return getGridSize(getFieldSize(getWindowSize()));\r\n};\r\n\r\nexport default getGridSize;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Hover from \"./Hover\";\r\nimport Cells from \"./Cells\";\r\nimport { onFieldClick, onFieldMouseMove, toNextGeneration} from \"../actions\";\r\nimport { RECT_SIZE, MSEC_PER_GENERATION} from '../types'\r\nimport { StoreState } from '../reducers';\r\n\r\nimport \"./Style.css\"\r\nimport getGridSize, { getCurrentGridSize } from '../utils/sizeLib';\r\n\r\ninterface BoundingRect{ left:number; top:number;};\r\n\r\nconst Field = ()=>{\r\n    const dispatch = useDispatch();\r\n\r\n    const refTimer = useRef<number|null>(null);\r\n    const refRoot = useRef<SVGSVGElement>(null);\r\n    const boundingRectRef = useRef<BoundingRect>({\r\n        left:0, top:0\r\n    });\r\n\r\n    const state = useSelector((state:StoreState)=>state.field);\r\n    const appState = useSelector((state:StoreState)=>state.app);\r\n    \r\n    useEffect(() => {\r\n        if(refRoot.current!==null){\r\n            boundingRectRef.current = refRoot.current.getBoundingClientRect();\r\n        }\r\n    });\r\n\r\n    const convertToGrid = (a: number): number => {\r\n        return Math.round(a/RECT_SIZE);\r\n    }\r\n\r\n    const convertMousePosition = (ev: React.MouseEvent<SVGSVGElement>) => {\r\n        const rect = boundingRectRef.current;\r\n        return {\r\n            x: convertToGrid(ev.clientX-rect.left),\r\n            y: convertToGrid(ev.clientY-rect.top)\r\n            }; \r\n    }\r\n    const mouseOver = (ev:React.MouseEvent<SVGSVGElement>) => {\r\n        dispatch(onFieldMouseMove(convertMousePosition(ev)));\r\n    }\r\n\r\n    const fieldClicked = (ev: React.MouseEvent<SVGSVGElement>) => {\r\n        if(!state.playing){\r\n            dispatch(onFieldClick(convertMousePosition(ev)));\r\n        }\r\n    }\r\n\r\n    if(state.playing && refTimer.current===null){\r\n        refTimer.current = window.setInterval(()=>{\r\n            dispatch(toNextGeneration(state.gridx, state.gridy));\r\n        }, MSEC_PER_GENERATION);\r\n    }else if(!state.playing && refTimer.current!==null){\r\n        window.clearInterval(refTimer.current);\r\n        refTimer.current = null;\r\n    }\r\n\r\n    const {gridx, gridy, width, height} \r\n        = getGridSize({ x: appState.windowX, y: appState.windowY });\r\n\r\n\r\n    const outerBorder = (<rect width={width} \r\n        height={height} \r\n        className=\"field-line\" />);\r\n\r\n    const vLines = [];\r\n    for(let xi=0;xi<gridx-1;xi++){\r\n        const _x = (xi+1)*RECT_SIZE;\r\n        vLines.push(<line key={xi} \r\n            x1={_x} x2={_x} \r\n            y1={0} y2={height} \r\n            className=\"field-line\" />);\r\n    }\r\n    const hLines = [];\r\n    for(let yi=0;yi<gridy-1;yi++){\r\n        const _y = (yi+1)*RECT_SIZE;\r\n        hLines.push(<line key={yi} \r\n                    x1={0} x2={width} \r\n                    y1={_y} y2={_y} \r\n                    className=\"field-line\" />);\r\n    }\r\n\r\n    return (<svg \r\n        width={ width } height={ height }\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n        onMouseMove={mouseOver}\r\n        onClick={fieldClicked}\r\n        ref={refRoot}>\r\n\r\n        {outerBorder}\r\n        {vLines}\r\n        {hLines}\r\n\r\n        <Cells />\r\n        <Hover />\r\n\r\n    </svg>);\r\n    \r\n};\r\n\r\nexport default Field;\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport {\r\n        onSendPlayCommand, \r\n        onClearClicked\r\n    } from '../actions'\r\nimport {StoreState} from '../reducers';\r\n\r\n\r\n\r\nconst ContrtolButtons = ()=>{\r\n    const dispatch = useDispatch();\r\n    const state = useSelector(\r\n            (state: StoreState) => state.controlButtons);\r\n\r\n    const playLabel = (state.playing)? \"Stop\" : \"Start\";\r\n    return (<div>\r\n        <Button color=\"primary\" variant=\"contained\" \r\n            onClick={ev=>dispatch(onSendPlayCommand(!state.playing))} >\r\n            { playLabel }\r\n        </Button>\r\n        <Button disabled={state.playing} variant=\"contained\" \r\n            onClick={()=>dispatch(onClearClicked())} >\r\n            Clear\r\n        </Button>\r\n    </div>);\r\n}\r\n\r\n\r\nexport default ContrtolButtons;","\r\n\r\nexport type XPositionType = \"left\" | \"center\" | \"right\";\r\nexport type YPositionType = \"top\" | \"center\" | \"bottom\";\r\n\r\nexport interface CellPattern{\r\n    name: string;\r\n    pattern: string[];\r\n    position: {\r\n        x: XPositionType,\r\n        y: YPositionType\r\n    };\r\n};\r\n\r\nconst cellPatterns: CellPattern[]=[\r\n    {\r\n        name: \"Glider Gun\",\r\n        pattern: [\r\n            \"                        X\",\r\n            \"                      X X\",\r\n            \"            XX      XX            XX\",\r\n            \"           X   X    XX            XX\",\r\n            \"XX        X     X   XX\",\r\n            \"XX        X   X XX    X X\",\r\n            \"          X     X       X\",\r\n            \"           X   X\",\r\n            \"            XX\"\r\n        ],\r\n        position: {x:\"left\", y:\"top\"}},\r\n    {\r\n        name: \"Glider\",\r\n        pattern: [\r\n            \" X\",\r\n            \"  X\",\r\n            \"XXX\",\r\n        ],\r\n        position: {x:\"left\", y:\"top\"}},\r\n    {\r\n        name: \"Light-weight spaceship\",\r\n        pattern: [\r\n            \"X  X\",\r\n            \"    X\",\r\n            \"X   X\",\r\n            \" XXXX\"\r\n        ],\r\n        position: {x:\"left\", y:\"top\"}},\r\n    {\r\n        name: \"Acorn\",\r\n        pattern: [\r\n            \" X\",\r\n            \"   X\",\r\n            \"XX  XXX\",\r\n        ],\r\n        position: {x:\"center\", y:\"center\"}},\r\n    {\r\n        name: \"R-pentomino\",\r\n        pattern: [\r\n            \" XX\",\r\n            \"XX\",\r\n            \" X\",\r\n        ],\r\n        position: {x:\"center\", y:\"center\"}},\r\n];\r\n\r\nexport default cellPatterns;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { onPatternChanged, onSendPlayCommand } from '../actions'\r\nimport { StoreState } from '../reducers';\r\nimport cellPatterns from '../utils/cellPatterns';\r\n\r\nconst PatternSelector = () =>{\r\n    const dispatch = useDispatch();\r\n    const state = useSelector((state: StoreState)=>state.patternSelector);\r\n    \r\n    const selectChange = (event:React.ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(onSendPlayCommand(false));\r\n        dispatch(onPatternChanged(parseInt(event.target.value)));\r\n    }\r\n\r\n    const patterns=[];\r\n    patterns.push((<option value={-1} key={-1}>Please Select</option>));\r\n    for(let ci=0;ci<cellPatterns.length;ci++){\r\n        const c = cellPatterns[ci];\r\n        patterns.push((<option value={ci} key={ci}>{c.name}</option>));\r\n    }\r\n    return (<div>\r\n        <select value={state.pattern} onChange={selectChange}>\r\n            {patterns}\r\n        </select>\r\n    </div>);\r\n    \r\n}\r\nexport default PatternSelector;\r\n\r\n\r\n","import React, { useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport Field from \"./components/Field\"\nimport ContrtolButtons from \"./components/ContrtolButtons\"\n\nimport './App.css';\nimport PatternSelector from './components/PatternSelector';\nimport { useDispatch } from 'react-redux';\nimport { onScreenSizeChanged, onSendPlayCommand } from './actions';\nimport { getWindowSize } from './utils/sizeLib';\n\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  useEffect(()=>{\n\n    const handler = ()=>{\n      const {x, y} = getWindowSize();\n      dispatch(onSendPlayCommand(false));\n      dispatch(onScreenSizeChanged(x, y));\n    };\n    \n    window.addEventListener(\"resize\",handler);\n    window.addEventListener(\"gesturestart\", handler);\n    return ()=>{window.removeEventListener(\"resize\", handler); }\n  }, [])\n\n  return (\n    <div>\n    <Grid container alignItems='center' spacing={1}>\n      <Grid item>\n        <img src=\"gameoflife_mini.png\" width=\"145\" height=\"50\" alt=\"Game of Life\"/>\n      </Grid>\n      <Grid item>\n        <ContrtolButtons/>\n      </Grid>\n      <Grid item>\n        <Typography>Paste pattern: </Typography>\n      </Grid>\n      <Grid item>\n        <PatternSelector/>\n      </Grid>\n    </Grid>\n    <Field />\n    </div>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../types/action';\r\nimport { ClifeAction, FieldMouseMove } from '../actions';\r\nimport { HoverState } from '../types/states';\r\n\r\nconst initialState = {x:0, y:0, show:true};\r\n\r\nconst hover = (state: HoverState = initialState, action: ClifeAction)=>{\r\n    if(action.type===actionTypes.FIELD_MOUSE_MOVE){\r\n        const {gridPoint} = (action as FieldMouseMove);\r\n        const {x,y} = gridPoint;\r\n\r\n        if(x===null || y===null){  //外\r\n            return state;\r\n        }\r\n        return {show:true,x,y};\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default hover;\r\n","\r\nconst BIRTH_NUM = 3;\r\nconst SURVIVE_NUM=2;\r\n\r\ntype GridNumMap = {[n:number]:\r\n    {[n:number]:number}\r\n};\r\n\r\ntype Cells = {x:number,y:number}[];\r\n\r\n\r\nconst addAdjacent=(adjacentCount: GridNumMap, x: number, y: number): void =>{\r\n    const cy = adjacentCount[x] || {};\r\n    cy[y] = (cy[y] || 0) + 1;\r\n    adjacentCount[x] = cy;\r\n};\r\n\r\nconst nextGeneration = (cells:Cells, gridSize: {x:number,y:number}): Cells=>{\r\n    const adjacentCount: GridNumMap = {};\r\n    const currentCellIndex: GridNumMap = {};\r\n    for(let {x,y} of cells){\r\n        const cy = (currentCellIndex[x] || {});\r\n        cy[y] = 1;\r\n        currentCellIndex[x] = cy;\r\n\r\n        for(let xi=Math.max(x-1,0);xi<=Math.min(x+1, gridSize.x-1);xi++){\r\n            for(let yi=Math.max(y-1,0);yi<=Math.min(y+1, gridSize.y-1);yi++){\r\n                if(x!==xi || y!==yi){\r\n                    addAdjacent(adjacentCount, xi, yi);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const newCells:Cells = [];\r\n    for(let sx in adjacentCount){\r\n        for(let sy in adjacentCount[sx]){\r\n            const c = adjacentCount[sx][sy];\r\n            const x = parseInt(sx);\r\n            const y = parseInt(sy);\r\n            if(x>=gridSize.x || y>=gridSize.y){ continue; }\r\n            if(c===BIRTH_NUM){\r\n                newCells.push({x, y});\r\n            }else if(c===SURVIVE_NUM && currentCellIndex[x] && currentCellIndex[x][y]){\r\n                newCells.push({x, y});\r\n            }\r\n        }\r\n    }\r\n    return newCells;\r\n};\r\n\r\nexport default nextGeneration;","import { CellPattern, XPositionType, YPositionType } from \"./cellPatterns\";\r\nimport {  CellType } from \"../types\";\r\nimport { getCurrentGridSize } from \"./sizeLib\";\r\n\r\nconst convertPosition = (px:XPositionType, py:YPositionType, \r\n        patternWidth:number,patternHeight:number )=>{\r\n    let x=0;\r\n    let y=0;\r\n    const currentSize = getCurrentGridSize();\r\n    if(px===\"center\"){\r\n        x = Math.floor(currentSize.gridx / 2);\r\n    }else if(px===\"right\"){\r\n        x = Math.max(currentSize.gridx-patternWidth, 0);\r\n    }\r\n    if(py===\"center\"){\r\n        y = Math.floor(currentSize.gridy / 2);\r\n    }else if(py===\"bottom\"){\r\n        y = Math.max(currentSize.gridy-patternHeight, 0);\r\n    }\r\n    return {x,y}\r\n};\r\n\r\nconst pastePattern = (cellPattern:CellPattern): CellType[] => {\r\n    const { pattern, position } = cellPattern;\r\n    const patternHeight = pattern.length;\r\n    const patternWidth = Math.max(...pattern.map((r)=>r.length));\r\n    let {x,y} = convertPosition(position.x, position.y, \r\n        patternWidth, patternHeight);\r\n    const cells: CellType[] = [];\r\n    pattern.forEach(row =>{\r\n        let cx = x;\r\n        for(let i=0;i<row.length;i++){\r\n            if(row[i]===\"X\"){\r\n                cells.push({x:cx, y})\r\n            }\r\n            cx++;\r\n        }\r\n        y++;\r\n    });\r\n    return cells;\r\n};\r\n\r\nexport default pastePattern;","import * as actionTypes from '../types/action';\r\nimport { ClifeAction, FieldClick, SendPlayCommand } from '../actions';\r\nimport nextGeneration from '../utils/nextGeneration';\r\nimport pastePattern from '../utils/patternPaster';\r\nimport cellPatterns from '../utils/cellPatterns';\r\nimport { CellType } from '../types';\r\nimport { FieldState } from '../types/states';\r\nimport { getGridSize, getCurrentGridSize } from '../utils/sizeLib';\r\n\r\nconst {gridx, gridy} = getCurrentGridSize();\r\nconst initiasState = {\r\n    playing:false,\r\n    zoom: 1.0,\r\n    gridx: gridx,\r\n    gridy: gridy,\r\n    cells: [] as CellType[]\r\n};\r\n\r\n\r\nconst field = (state: FieldState=initiasState, action: ClifeAction): FieldState=>{\r\n    if(action.type===actionTypes.SCREEN_SIZE_CHANGED){\r\n        const s = action.size;\r\n        const {gridx, gridy} = getGridSize(s);\r\n        return {...state, ...{gridx, gridy}}\r\n    }if(action.type===actionTypes.SEND_PLAY_COMMAND){\r\n        return {...state, playing:action.play};\r\n    }else if(action.type===actionTypes.FIELD_CLICK){\r\n        return {...state, cells: putCell(state, action as FieldClick)};\r\n    }else if(action.type===actionTypes.NEXT_GENERATION){\r\n        return {...state, cells: nextGeneration(state.cells, action.gridSize)};\r\n        \r\n    }else if(action.type===actionTypes.CLEAR_CLICKED){\r\n        return {...state, cells:[] as CellType[]};\r\n    }else if(action.type===actionTypes.PATTERN_CHANGED){\r\n        if(action.selectedType!==-1){\r\n            return {...state, cells: pastePattern(cellPatterns[action.selectedType])};\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nconst putCell = (state: FieldState, action: FieldClick) => {\r\n    const {gridPoint} = action;\r\n    const {x,y} = gridPoint;\r\n    const _cells = state.cells;\r\n    // Check duplicate\r\n    for(let p of _cells){\r\n        if(p.x<x){ continue; }\r\n        if(p.x>x){ break; }\r\n        if(p.y===y){ // If cell exists here, delete it.\r\n            return _cells.filter(c=>(c.x!==x || c.y!==y)); \r\n        }\r\n    }\r\n    // Add new cell and sort\r\n    _cells.push({x,y});\r\n    _cells.sort((a,b)=>{\r\n        if(a.x!==b.x){\r\n            return a.x-b.x;\r\n        }\r\n        return a.y-b.y;\r\n    });\r\n\r\n    return _cells; \r\n};\r\n\r\nexport default field;\r\n","import * as actionTypes from '../types/action';\r\nimport { ClifeAction } from '../actions';\r\nimport { getWindowSize } from '../utils/sizeLib';\r\nimport { AppState } from '../types/states';\r\n\r\nconst windowSize = getWindowSize();\r\nconst initiasState = {windowX: windowSize.x, windowY: windowSize.y};\r\n\r\nconst app = (state: AppState=initiasState, action: ClifeAction): AppState=>{\r\n    if(action.type===actionTypes.SCREEN_SIZE_CHANGED){\r\n        const {x,y} = action.size;\r\n        return {...state, windowX: x, windowY: y};\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default app;\r\n","import * as actionTypes from '../types/action';\r\nimport { ClifeAction } from '../actions';\r\nimport { ControlButtonsState } from '../types/states';\r\n\r\nconst initialState = { playing:false };\r\n\r\nconst controlButtons = (state:ControlButtonsState=initialState, \r\n                        action: ClifeAction)=>{\r\n    if(action.type===actionTypes.SEND_PLAY_COMMAND){\r\n        if(state.playing!==action.play){\r\n            return {playing: action.play}\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default controlButtons;\r\n","import { ClifeAction } from '../actions';\r\n\r\nconst initialState = {\r\n    pattern:-1\r\n};\r\nconst patternSelector = (state = initialState, action: ClifeAction)=>{\r\n    // Nothing here, for now.\r\n    return state;\r\n};\r\n\r\nexport default patternSelector;\r\n","import { combineReducers } from 'redux';\r\nimport hover from './hover';\r\nimport field from './field';\r\nimport app from './app';\r\nimport controlButtons from './controlButtons';\r\nimport patternSelector from './patternSelector';\r\n\r\nexport const rootReducer = combineReducers({\r\n    field,\r\n    hover,\r\n    controlButtons,\r\n    patternSelector,\r\n    app\r\n  });\r\n\r\nexport type StoreState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport { rootReducer } from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}